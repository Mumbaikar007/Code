#include <iostream> 
#include <stdio.h> 
#include <cmath> 

using  namespace  std ; 

#define INF 9999999 

int **  C ;  // Optimums matrix 
int **  d ;  // distances between the cities 
int  iN ;   // number of cities 

int  main () 
{ 
   / ** number of cities read ** / 
   scanf ( "% i" , & iN ); 

   / ** Initialize ** / 
   C  =  new  int * [ iN ];         // n numbers without 0 -> iN + 1 
   for ( int  i = 1 ;  i  <=  iN ;  i ++ )   // to and with iN without 0 
      C [ i - 1 ]  =  new  int [( 1 << iN )];  // 2 ^ iN without 0, but 2 ^ iN is already the complete path (7 = 111 or 15 = 1111); 1 << x = 2 ^ x 

   d  =  new  int * [ iN + 1 ];         // n numbers without 0 
   for ( int  i = 1;  i  <=  iN ;  i ++ )  // To and with iN without 0 
      d [ i ]  =  new  int [ iN + 1 ];    // n numbers without 0 

   / ** ** input / 
   for ( int  i = 1 ;  i  <=  iN ;  i ++ )     // Up to and including without iN 0 
      for ( int  j = 1 ;  j  <=  iN ;  j ++ ) // To and with iN without 0 
      { 
         scanf ( "% i" ,  & d [ i ] [ j ]);    // read in the distances 
      } 

   / ******************************************** * 
    * Algorithm * 
    ********************************************* / 

   / ** Initialize all with kown 2 in C ** / 
   for ( int  k = 2 ;  k  <=  iN ;  k ++ )  // Without 0 & 1 for k, to and with iN 
   { 
      C [ k - 1] [ 1 ^ ( 1 << ( k - 1 ))]  =  d [ k ] [ 1 ];  // city 1 + city k 
   } 

   / ** compute the superscript power numbers in C ** / 
   for ( int  s = 3 ;  s  <=  iN ;  s ++ )                  // increase the thickness number without 0,1,2 
   { 
   	int  * comb  =  new  int [ s - 1 ];              // Quantity with the number of s
   	for(int i=0; i<s-1; i++)
   	    comb[i] = i;
   	    
	while(true)
	{          
	    int S = 1;
	    for(int i=0; i < s-1; i++)
	    	S = S^(1<<(comb[i]+1));
	     
	     for(int i=0; i < s-1; i++) //Alle Städte in S (comb) durchgehen
	     {
	     	  int k = comb[i]+2;
		  C[k-1][S] = INF;
		  for(int j=0; j < s-1; j++)  // Zweite Verbindungsstadt finden
		  {
		     int m = comb[j]+2;
		     if(m == k) // m != k
			continue;
		      C[k-1][S] = min(C[m-1][S^(1<<(k-1))]+d[m][k], C[k-1][S]); 
		  }
    	     }
    	     
    	     //Compute next Combination
    	     int i = (s-1) - 1;
	     ++comb[i];
	     while ((i > 0) && (comb[i] >= iN-1 - (s-1) + 1 + i)) {
		--i;
		++comb[i];
	     }
	     if (comb[0] > (iN-1) - (s-1))
		break; 		//Last combination computed, now break
	     for (i = i + 1; i < (s-1); ++i)
		comb[i] = comb[i - 1] + 1;
	}
   }

   /** Optimum berechnen **/
   int opt = INF;
   for(int k=2; k <= iN; k++)
   {
      opt = min(C[k-1][(1<<(iN))-1]+d[1][k], opt);
   }

   printf("%i\n",opt);

   /* // Auskommentieren um die Optimums-Matrix auszugeben
   for(int i=1; i <= iN; i++)
   {
      for(int j=1; j < (1<<iN); j++)
      {
         printf("%i ",(C[i-1][j]<0?0:C[i-1][j]));
      }
      printf("\n\n");
   } */
   
   // Pausieren
   //system("pause");

   return 0;
}